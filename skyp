#!/usr/bin/env ruby

require 'sqlite3'
require 'active_record'
require 'thor'

module Skyp
  class Chat < ActiveRecord::Base
    self.table_name = 'Chats'

    has_many :messages, :primary_key => :name, :foreign_key => :chatname

    scope :latest, -> { order(:activity_timestamp => :desc) }
  end

  class Message < ActiveRecord::Base
    self.table_name = 'Messages'

    belongs_to :chat, :primary_key => :name, :foreign_key => :chatname

    scope :search, ->(term) { where('body_xml like ?', "%#{ term }%").order(:timestamp) }
  end

  class CLI < Thor
    class_option :account, :type => :string, :desc => 'Set account (Skype Name)'

    desc 'chats', 'List chat names'
    option :all,   :type => :boolean, :aliases => '-a', :desc => 'List all chats'
    option :limit, :type => :numeric, :aliases => '-l', :desc => 'Only list the latest N chats', :default => 10
    def chats
      setup_database(options[:account])

      chats = Chat.latest
      chats = chats.limit(options[:limit]) unless options[:all]
      chats.each do |chat|
        puts chat.friendlyname
      end
    end

    desc 'search TERM', 'Search the term TERM'
    option :chat, :type => :string, :aliases => '-c', :desc => 'Search in the chatroom CHAT'
    def search(term)
      setup_database(options[:account])

      chat = Chat.find_by_friendlyname(options[:chat])

      message_scope = chat.try(:messages) || Message

      messages = message_scope.search(term)
      messages.each do |message|
        puts "[#{ message.timestamp }] #{ message.from_dispname }: #{ message.body_xml }"
      end
    end

    private

    def setup_database(account)
      account ||= default_account

      # Disable STI
      ActiveRecord::Base.inheritance_column = nil

      database_path = "#{ Dir.home }/Library/Application Support/Skype/#{ account }/main.db"
      ActiveRecord::Base.establish_connection(adapter: 'sqlite3', encoding: 'utf8', database: database_path)
    end

    def default_account
      path = "#{ Dir.home }/.skyp"

      unless File.exists?(path)
        account = ask('Please enter your account (Skype Name):')
        IO.write(path, account)
      end

      IO.read(path).chomp
    end
  end
end

Skyp::CLI.start(ARGV)

